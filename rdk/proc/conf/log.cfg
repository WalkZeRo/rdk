
#  %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#  %r 输出自应用启动到输出该log信息耗费的毫秒数
#  %c 输出所属的类目，通常就是所在类的全名
#  %t 输出产生该日志事件的线程名
#  %n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
#  %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式
#     比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#  %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数
#     举例：Testlog4.main(TestLog4.java:10)

log.pattern=%d %p [%c] - %m%n
log.app.pattern=%d %p %m%n

# 默认值为debug
log.level=debug


# RDK使用 RollingFileAppender 记录日志
# 默认值为10M
log.RollingFile.MaxFileSize=10000000
# 默认值为5
log.RollingFile.MaxBackupIndex=5


# 为每个app设置不同的日志级别，格式如下
# 需要将app_name替换为真实的app名
# log.app_name.level=warn
# 未配置的app日志级别取自 log.level
# 例如
# log.sqm/voice_service/volte.level=debug
